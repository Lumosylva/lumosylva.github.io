<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马东东的博客</title>
  <icon>https://www.gravatar.com/avatar/3c3fb60cb30409afbdbdedfdddc3f200</icon>
  <subtitle>开来啊，快活呀！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aboysblog.com/"/>
  <updated>2019-07-21T10:17:14.327Z</updated>
  <id>https://www.aboysblog.com/</id>
  
  <author>
    <name>Donny</name>
    <email>821300079@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高并发编程系列：NIO、BIO、AIO的区别，及NIO的应用和框架选型</title>
    <link href="https://www.aboysblog.com/2019/07/21/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%9ANIO%E3%80%81BIO%E3%80%81AIO%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%8F%8ANIO%E7%9A%84%E5%BA%94%E7%94%A8%E5%92%8C%E6%A1%86%E6%9E%B6%E9%80%89%E5%9E%8B/"/>
    <id>https://www.aboysblog.com/2019/07/21/高并发编程系列：NIO、BIO、AIO的区别，及NIO的应用和框架选型/</id>
    <published>2019-07-21T10:14:03.807Z</published>
    <updated>2019-07-21T10:17:14.327Z</updated>
    
    <content type="html"><![CDATA[<pre><code>谈到并发编程就不得不提到NIO，以及相关的Java NIO框架Netty等，并且在很d多面试中也经常提到NIO和AIO、同步和异步、阻塞和非阻塞等的区别。我先简短介绍下几个NIO相关的概念，然后再谈NIO重点掌握内容，以及Java NIO框架选型。</code></pre><h2 id="AIO、BIO、NIO的区别"><a href="#AIO、BIO、NIO的区别" class="headerlink" title="AIO、BIO、NIO的区别"></a>AIO、BIO、NIO的区别</h2><pre><code>IO模型主要分类：+ 同步(synchronous) IO和异步(asynchronous) IO+ 阻塞(blocking) IO和非阻塞(non-blocking)IO+ 同步阻塞(blocking-IO)简称BIO+ 同步非阻塞(non-blocking-IO)简称NIO+ 异步非阻塞(synchronous-non-blocking-IO)简称AIO</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;谈到并发编程就不得不提到NIO，以及相关的Java NIO框架Netty等，并且在很d多面试中也经常提到NIO和AIO、同步和异步、阻塞和非阻塞等的区别。我先简短介绍下几个NIO相关的概念，然后再谈NIO重点掌握内容，以及Java NIO框架选型。
&lt;/co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages搭建博客</title>
    <link href="https://www.aboysblog.com/2018/04/06/Hexo%20+%20GitHub%20Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://www.aboysblog.com/2018/04/06/Hexo + GitHub Pages搭建博客/</id>
    <published>2018-04-06T14:44:57.554Z</published>
    <updated>2018-04-06T14:45:31.122Z</updated>
    
    <content type="html"><![CDATA[<p>搭建 Node.js 环境<br>为什么要搭建 Node.js 环境？ – 因为 Hexo 博客系统是基于 Node.js 编写的</p><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p><p>在 Node.js 官网：<a href="https://nodejs.org/en/下载最新安装包LTS版" target="_blank" rel="external">https://nodejs.org/en/下载最新安装包LTS版</a></p><p>Hexo + GitHub Pages搭建博客</p><p>保持默认设置即可，一路Next，安装很快就结束了。</p><p>然后打开命令提示符，输入</p><p>node -v</p><p>npm -v<br>出现版本号则说明 Node.js 环境配置成功，第一步完成！！！</p><p>Hexo + GitHub Pages搭建博客</p><p>搭建 Git 环境<br>为什么要搭建 Git 环境？ – 因为需要把本地的网页和文章等提交到 GitHub 上。</p><p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>在 Git 官网：<a href="https://git-scm.com/下载适合自己系统的安装包" target="_blank" rel="external">https://git-scm.com/下载适合自己系统的安装包</a></p><p>Hexo + GitHub Pages搭建博客</p><p>保持默认设置即可，一路Next，安装很快就结束了。</p><p>开始菜单Git Bash</p><p>Hexo + GitHub Pages搭建博客或桌面右键打开Git Bush HereHexo + GitHub Pages搭建博客输入</p><p>git –version<br>出现版本号则说明 Git 环境配置成功，第二步完成！</p><p>Hexo + GitHub Pages搭建博客</p><p>GitHub 注册和配置<br>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p><p>Github注册：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></p><p>创建仓库：Repository name 使用自己的用户名，仓库名规则：</p><p>注意：yourname必须是你的用户名。</p><p>yourname/yourname.github.io</p><p>例如我的是：mdd1991.github.io</p><p>Hexo + GitHub Pages搭建博客</p><p>访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。</p><p>到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作。</p><p>安装配置 Hexo<br>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>强烈建议你花20分钟区读一读 Hexo 的官方文档：<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a></p><p>Hexo + GitHub Pages搭建博客</p><p>使用 npm 安装 Hexo<br>在命令行中输入：</p><p>npm install hexo-cli -g<br>通常会卡住一会，耐心等待，然后你将会看到下图，可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。</p><p>Hexo + GitHub Pages搭建博客</p><p>查看Hexo的版本</p><p>hexo version<br>Hexo + GitHub Pages搭建博客</p><p>安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。</p><p>hexo init mdd1991.github.io<br>Hexo + GitHub Pages搭建博客</p><p>cd mdd1991.github.io</p><p>npm install<br>Hexo + GitHub Pages搭建博客</p><p>出现警告，在网上搜索忽略警告即可：</p><p>Hexo + GitHub Pages搭建博客</p><p>新建完成后，指定文件夹的目录如下：</p><p>Hexo + GitHub Pages搭建博客</p><p>├── .deploy        #需要部署的文件</p><p>├── node_modules    #Hexo插件</p><p>├── public          #生成的静态网页文件</p><p>├── scaffolds      #模板</p><p>├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</p><p>| ├── _drafts      #草稿</p><p>| └── _posts        #文章</p><p>├── themes          #主题</p><p>├── _config.yml    #全局配置文件</p><p>└── package.json    #npm 依赖等</p><p>运行本地 Hexo 服务<br>hexo server<br>或者</p><p>hexo s<br>若出现防火墙点击确定。</p><p>Hexo + GitHub Pages搭建博客</p><p>您的网站会在<a href="http://localhost:4000下启动。如果http://localhost:4000能够正常访问，则说明" target="_blank" rel="external">http://localhost:4000下启动。如果http://localhost:4000能够正常访问，则说明</a> Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。</p><p>Hexo + GitHub Pages搭建博客</p><p>在浏览器中访问一直打不开怎么办？原因是端口被另一个程序占用，也没提示，换个端口比如：4001就可以了。</p><p>hexo server –port=<other port=""><br>Hexo + GitHub Pages搭建博客</other></p><p>注意1：执行hexo server提示找不到该指令</p><p>解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</p><p>sudo npm install hexo-server<br>或者</p><p>npm install hexo -server –save<br>关联 Hexo 与 GitHub Pages<br>我们如何让本地git项目与远程的github建立联系呢？用 SSH keys</p><p>生成SSH keys<br>输入你自己的邮箱地址</p><p>ssh-keygen -t rsa -C “donnymoving@gmail.com”<br>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。</p><p>Hexo + GitHub Pages搭建博客</p><p>添加 SSH Key 到 GitHub<br>打开上面提示的路径C:\Users\User.ssh\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到<a href="https://github.com/settings/ssh的new" target="_blank" rel="external">https://github.com/settings/ssh的new</a> SSH key中</p><p>Hexo + GitHub Pages搭建博客</p><p>测试<br>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p><p>ssh -T git@github.com<br>如果是下面的反馈：</p><p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.</p><p>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</p><p>Are you sure you want to continue connecting (yes/no)?</p><p>不要紧张，输入yes就好，然后会看到：</p><p>Hi mdd1991! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>Hexo + GitHub Pages搭建博客</p><p>配置Git个人信息<br>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。</p><p>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p><p>git config –global user.name “Donny”</p><p>git config –global user.email “donnymoving@gmail.com”<br>配置 Deployment<br>复制mdd1991.github.io路径</p><p>Hexo + GitHub Pages搭建博客</p><p>在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的：</p><p>需要注意的是：冒号后面记得空一格！</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a></h2><p>deploy:</p><p>type: git</p><p>repo: git@github.com:mdd1991/mdd1991.github.io.git</p><p>branch: master</p><p>Hexo + GitHub Pages搭建博客</p><p>本地文件提交到 GitHub Pages<br>// 删除旧的 public 文件</p><p>hexo clean<br>// 生成新的 public 文件</p><p>hexo generate<br>或者</p><p>hexo g<br>// 开始部署</p><p>hexo deploy<br>或者</p><p>hexo d<br>注意1：若上面操作提示ERROR Deployer not found: git，则需要安装一个扩展：<br>npm install hexo-deployer-git –save<br>然后再部署即可解决。需要注意的是yaml语法要求严格，注意空格。若一直不行，建议把github地址那条语句重新手写一遍，每个冒号后面要有一个半角的空格。</p><p>若最后显示INFO Deploy done: git，表示部署已经成功了，然后在浏览器中输入<a href="https://mdd1991.github.io（用户名改成你的）看到了" target="_blank" rel="external">https://mdd1991.github.io（用户名改成你的）看到了</a> Hexo 与 GitHub Pages 已经成功关联了，哇哇哇哇哇哇，开心死你了，不要忘了回来给我点赞哟 ~</p><p>Hexo + GitHub Pages搭建博客</p><p>注意2：如果在执行hexo d后,出现error deployer not found:github的错误（如下），则是因为没有设置好 public key 所致，重新详细设置即可。</p><p>Permission denied (publickey).</p><p>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights</p><p>and the repository exists.</p><p>注意3：怎么避免 .md 文件被解析？</p><p>Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy_git文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？</p><p>将README.md放在source文件夹，然后修改_config.yml，设置 skip_render: README.md选项就行了，将不需要渲染的文件名称加入的其选项下就行了。</p><p>Hexo + GitHub Pages搭建博客</p><p>GitHub Pages 地址解析到个人域名<br>Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。</p><p>看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。进行该绑定过程，其实就是一个重定向的过程。</p><p>在 GitHub 仓库的根目录下建立一个CNAME的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加http://</p><p><a href="http://www.aboysblog.com">http://www.aboysblog.com</a></p><p>Hexo + GitHub Pages搭建博客注意：CNAME 一定是在你 Github 项目的 master 根目录下</p><p>进入阿里云域名解析地址，添加解析：</p><p>记录类型选择CNAME</p><p>主机记录填www</p><p>解析线路选择默认</p><p>记录值填yourname.github.io</p><p>TTL值为10分钟</p><p>再添加一个解析，记录类型A</p><p>主机记录填www</p><p>解析线路选择默认</p><p>记录值填你GitHub 的ip地址（在cmd中ping：）</p><p>ping mdd1991.github.com<br>Hexo + GitHub Pages搭建博客</p><p>点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。</p><p>域名绑定成功，域名解析成功，因此你在浏览中输入<a href="http://www.aboysblog.com，或" target="_blank" rel="external">http://www.aboysblog.com，或</a> aboysblog.com 就可以访问到博客了，输入 mdd1991.github.io 会重定向到<a href="http://www.aboysblog.com。过程：www" target="_blank" rel="external">http://www.aboysblog.com。过程：www</a> 的方式，会先解析成<a href="http://xxxx.github.io，然后根据" target="_blank" rel="external">http://xxxx.github.io，然后根据</a> CNAME 再变成 www</p><p>注意：CNAME文件在下次hexo deploy的时候就消失了，需要重新创建，这样就很繁琐</p><p>方法一：在hexo g之后，hexo d之前，把CNAME文件复制到 “\public” 目录下面，里面写入你要绑定的域名。</p><p>方法二：将需要上传至github的内容放在source文件夹，例如README.md、CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。</p><p>注意1：每次生成的 CNAME 都是 yoursite.com 怎么解决？</p><p>修改 _config.yml</p><p>url: <a href="http://www.aboysblog.com">http://www.aboysblog.com</a></p><p>root: /</p><p>permalink: :year/:month/:day/:title/</p><p>permalink_defaults:</p><p>Hexo 的常用操作<br>发表一篇文章<br>hexo new “文章标题”<br>Hexo + GitHub Pages搭建博客</p><p>在本地博客文件夹source_posts文件夹下看到我们新建的 markdown 文件。</p><p>当然，我们也可以手动添加Markdown文件在source-&gt;_posts文件夹下，其效果同样可以媲美hexo new</p><p>文章编辑好之后，运行生成、部署命令：</p><p>hexo clean</p><p>hexo g</p><p>hexo d<br>当然你也可以执行下面的命令，相当于上面两条命令的效果</p><p>hexo clean</p><p>hexo d -g<br>新建一个自定义页面<br>hexo new page folder<br>文章如何添加多个标签<br>有两种多标签格式</p><p>tags: [a, b, c]</p><p>或</p><p>tags:</p><p>– a</p><p>– b</p><p>– c</p><p>显示部分文章内容<br>如果在博客文章列表中，不想全文显示，可以增加 <a id="more"></a>, 后面的内容就不会显示在列表。</p><p>更改主题<br>官方主题库：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p><p>Hexo主题非常，推荐使用Next为主题，请阅读 Next 的官方文档（<a href="http://theme-next.iissnan.com/），5" target="_blank" rel="external">http://theme-next.iissnan.com/），5</a> 分钟快速安装。</p><p>再提示一点，大家可以hexo主题修改一步就hexo s看下变化，初次接触对参数不清楚。只有hexo s后在可以在本地浏览到效果，Ctrl+C 停止服务器。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建 Node.js 环境&lt;br&gt;为什么要搭建 Node.js 环境？ – 因为 Hexo 博客系统是基于 Node.js 编写的&lt;/p&gt;
&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。&lt;/p&gt;
&lt;p&gt;在 Node.js 官网：&lt;a href=&quot;https://nodejs.org/en/下载最新安装包LTS版&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/en/下载最新安装包LTS版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;保持默认设置即可，一路Next，安装很快就结束了。&lt;/p&gt;
&lt;p&gt;然后打开命令提示符，输入&lt;/p&gt;
&lt;p&gt;node -v&lt;/p&gt;
&lt;p&gt;npm -v&lt;br&gt;出现版本号则说明 Node.js 环境配置成功，第一步完成！！！&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;搭建 Git 环境&lt;br&gt;为什么要搭建 Git 环境？ – 因为需要把本地的网页和文章等提交到 GitHub 上。&lt;/p&gt;
&lt;p&gt;Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/p&gt;
&lt;p&gt;在 Git 官网：&lt;a href=&quot;https://git-scm.com/下载适合自己系统的安装包&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://git-scm.com/下载适合自己系统的安装包&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;保持默认设置即可，一路Next，安装很快就结束了。&lt;/p&gt;
&lt;p&gt;开始菜单Git Bash&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客或桌面右键打开Git Bush HereHexo + GitHub Pages搭建博客输入&lt;/p&gt;
&lt;p&gt;git –version&lt;br&gt;出现版本号则说明 Git 环境配置成功，第二步完成！&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;GitHub 注册和配置&lt;br&gt;GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。&lt;/p&gt;
&lt;p&gt;Github注册：&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建仓库：Repository name 使用自己的用户名，仓库名规则：&lt;/p&gt;
&lt;p&gt;注意：yourname必须是你的用户名。&lt;/p&gt;
&lt;p&gt;yourname/yourname.github.io&lt;/p&gt;
&lt;p&gt;例如我的是：mdd1991.github.io&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。&lt;/p&gt;
&lt;p&gt;到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作。&lt;/p&gt;
&lt;p&gt;安装配置 Hexo&lt;br&gt;Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;p&gt;强烈建议你花20分钟区读一读 Hexo 的官方文档：&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/zh-cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;使用 npm 安装 Hexo&lt;br&gt;在命令行中输入：&lt;/p&gt;
&lt;p&gt;npm install hexo-cli -g&lt;br&gt;通常会卡住一会，耐心等待，然后你将会看到下图，可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;查看Hexo的版本&lt;/p&gt;
&lt;p&gt;hexo version&lt;br&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。&lt;/p&gt;
&lt;p&gt;hexo init mdd1991.github.io&lt;br&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;cd mdd1991.github.io&lt;/p&gt;
&lt;p&gt;npm install&lt;br&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;出现警告，在网上搜索忽略警告即可：&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;新建完成后，指定文件夹的目录如下：&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;├── .deploy        #需要部署的文件&lt;/p&gt;
&lt;p&gt;├── node_modules    #Hexo插件&lt;/p&gt;
&lt;p&gt;├── public          #生成的静态网页文件&lt;/p&gt;
&lt;p&gt;├── scaffolds      #模板&lt;/p&gt;
&lt;p&gt;├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里&lt;/p&gt;
&lt;p&gt;| ├── _drafts      #草稿&lt;/p&gt;
&lt;p&gt;| └── _posts        #文章&lt;/p&gt;
&lt;p&gt;├── themes          #主题&lt;/p&gt;
&lt;p&gt;├── _config.yml    #全局配置文件&lt;/p&gt;
&lt;p&gt;└── package.json    #npm 依赖等&lt;/p&gt;
&lt;p&gt;运行本地 Hexo 服务&lt;br&gt;hexo server&lt;br&gt;或者&lt;/p&gt;
&lt;p&gt;hexo s&lt;br&gt;若出现防火墙点击确定。&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;您的网站会在&lt;a href=&quot;http://localhost:4000下启动。如果http://localhost:4000能够正常访问，则说明&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000下启动。如果http://localhost:4000能够正常访问，则说明&lt;/a&gt; Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;在浏览器中访问一直打不开怎么办？原因是端口被另一个程序占用，也没提示，换个端口比如：4001就可以了。&lt;/p&gt;
&lt;p&gt;hexo server –port=&lt;other port=&quot;&quot;&gt;&lt;br&gt;Hexo + GitHub Pages搭建博客&lt;/other&gt;&lt;/p&gt;
&lt;p&gt;注意1：执行hexo server提示找不到该指令&lt;/p&gt;
&lt;p&gt;解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：&lt;/p&gt;
&lt;p&gt;sudo npm install hexo-server&lt;br&gt;或者&lt;/p&gt;
&lt;p&gt;npm install hexo -server –save&lt;br&gt;关联 Hexo 与 GitHub Pages&lt;br&gt;我们如何让本地git项目与远程的github建立联系呢？用 SSH keys&lt;/p&gt;
&lt;p&gt;生成SSH keys&lt;br&gt;输入你自己的邮箱地址&lt;/p&gt;
&lt;p&gt;ssh-keygen -t rsa -C “donnymoving@gmail.com”&lt;br&gt;在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;添加 SSH Key 到 GitHub&lt;br&gt;打开上面提示的路径C:\Users\User.ssh\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到&lt;a href=&quot;https://github.com/settings/ssh的new&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/settings/ssh的new&lt;/a&gt; SSH key中&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;测试&lt;br&gt;可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：&lt;/p&gt;
&lt;p&gt;ssh -T git@github.com&lt;br&gt;如果是下面的反馈：&lt;/p&gt;
&lt;p&gt;The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.&lt;/p&gt;
&lt;p&gt;RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.&lt;/p&gt;
&lt;p&gt;Are you sure you want to continue connecting (yes/no)?&lt;/p&gt;
&lt;p&gt;不要紧张，输入yes就好，然后会看到：&lt;/p&gt;
&lt;p&gt;Hi mdd1991! You’ve successfully authenticated, but GitHub does not provide shell access.&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;配置Git个人信息&lt;br&gt;现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。&lt;/p&gt;
&lt;p&gt;Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。&lt;/p&gt;
&lt;p&gt;git config –global user.name “Donny”&lt;/p&gt;
&lt;p&gt;git config –global user.email “donnymoving@gmail.com”&lt;br&gt;配置 Deployment&lt;br&gt;复制mdd1991.github.io路径&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的：&lt;/p&gt;
&lt;p&gt;需要注意的是：冒号后面记得空一格！&lt;/p&gt;
&lt;h1 id=&quot;Deployment&quot;&gt;&lt;a href=&quot;#Deployment&quot; class=&quot;headerlink&quot; title=&quot;Deployment&quot;&gt;&lt;/a&gt;Deployment&lt;/h1&gt;&lt;h2 id=&quot;Docs-https-hexo-io-docs-deployment-html&quot;&gt;&lt;a href=&quot;#Docs-https-hexo-io-docs-deployment-html&quot; class=&quot;headerlink&quot; title=&quot;Docs: https://hexo.io/docs/deployment.html&quot;&gt;&lt;/a&gt;Docs: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/docs/deployment.html&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;deploy:&lt;/p&gt;
&lt;p&gt;type: git&lt;/p&gt;
&lt;p&gt;repo: git@github.com:mdd1991/mdd1991.github.io.git&lt;/p&gt;
&lt;p&gt;branch: master&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;本地文件提交到 GitHub Pages&lt;br&gt;// 删除旧的 public 文件&lt;/p&gt;
&lt;p&gt;hexo clean&lt;br&gt;// 生成新的 public 文件&lt;/p&gt;
&lt;p&gt;hexo generate&lt;br&gt;或者&lt;/p&gt;
&lt;p&gt;hexo g&lt;br&gt;// 开始部署&lt;/p&gt;
&lt;p&gt;hexo deploy&lt;br&gt;或者&lt;/p&gt;
&lt;p&gt;hexo d&lt;br&gt;注意1：若上面操作提示ERROR Deployer not found: git，则需要安装一个扩展：&lt;br&gt;npm install hexo-deployer-git –save&lt;br&gt;然后再部署即可解决。需要注意的是yaml语法要求严格，注意空格。若一直不行，建议把github地址那条语句重新手写一遍，每个冒号后面要有一个半角的空格。&lt;/p&gt;
&lt;p&gt;若最后显示INFO Deploy done: git，表示部署已经成功了，然后在浏览器中输入&lt;a href=&quot;https://mdd1991.github.io（用户名改成你的）看到了&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mdd1991.github.io（用户名改成你的）看到了&lt;/a&gt; Hexo 与 GitHub Pages 已经成功关联了，哇哇哇哇哇哇，开心死你了，不要忘了回来给我点赞哟 ~&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;注意2：如果在执行hexo d后,出现error deployer not found:github的错误（如下），则是因为没有设置好 public key 所致，重新详细设置即可。&lt;/p&gt;
&lt;p&gt;Permission denied (publickey).&lt;/p&gt;
&lt;p&gt;fatal: Could not read from remote repository.&lt;/p&gt;
&lt;p&gt;Please make sure you have the correct access rights&lt;/p&gt;
&lt;p&gt;and the repository exists.&lt;/p&gt;
&lt;p&gt;注意3：怎么避免 .md 文件被解析？&lt;/p&gt;
&lt;p&gt;Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy_git文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？&lt;/p&gt;
&lt;p&gt;将README.md放在source文件夹，然后修改_config.yml，设置 skip_render: README.md选项就行了，将不需要渲染的文件名称加入的其选项下就行了。&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;GitHub Pages 地址解析到个人域名&lt;br&gt;Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。&lt;/p&gt;
&lt;p&gt;看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。进行该绑定过程，其实就是一个重定向的过程。&lt;/p&gt;
&lt;p&gt;在 GitHub 仓库的根目录下建立一个CNAME的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加http://&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.aboysblog.com&quot;&gt;http://www.aboysblog.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hexo + GitHub Pages搭建博客注意：CNAME 一定是在你 Github 项目的 master 根目录下&lt;/p&gt;
&lt;p&gt;进入阿里云域名解析地址，添加解析：&lt;/p&gt;
&lt;p&gt;记录类型选择CNAME&lt;/p&gt;
&lt;p&gt;主机记录填www&lt;/p&gt;
&lt;p&gt;解析线路选择默认&lt;/p&gt;
&lt;p&gt;记录值填yourname.github.io&lt;/p&gt;
&lt;p&gt;TTL值为10分钟&lt;/p&gt;
&lt;p&gt;再添加一个解析，记录类型A&lt;/p&gt;
&lt;p&gt;主机记录填www&lt;/p&gt;
&lt;p&gt;解析线路选择默认&lt;/p&gt;
&lt;p&gt;记录值填你GitHub 的ip地址（在cmd中ping：）&lt;/p&gt;
&lt;p&gt;ping mdd1991.github.com&lt;br&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。&lt;/p&gt;
&lt;p&gt;域名绑定成功，域名解析成功，因此你在浏览中输入&lt;a href=&quot;http://www.aboysblog.com，或&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.aboysblog.com，或&lt;/a&gt; aboysblog.com 就可以访问到博客了，输入 mdd1991.github.io 会重定向到&lt;a href=&quot;http://www.aboysblog.com。过程：www&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.aboysblog.com。过程：www&lt;/a&gt; 的方式，会先解析成&lt;a href=&quot;http://xxxx.github.io，然后根据&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xxxx.github.io，然后根据&lt;/a&gt; CNAME 再变成 www&lt;/p&gt;
&lt;p&gt;注意：CNAME文件在下次hexo deploy的时候就消失了，需要重新创建，这样就很繁琐&lt;/p&gt;
&lt;p&gt;方法一：在hexo g之后，hexo d之前，把CNAME文件复制到 “\public” 目录下面，里面写入你要绑定的域名。&lt;/p&gt;
&lt;p&gt;方法二：将需要上传至github的内容放在source文件夹，例如README.md、CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。&lt;/p&gt;
&lt;p&gt;注意1：每次生成的 CNAME 都是 yoursite.com 怎么解决？&lt;/p&gt;
&lt;p&gt;修改 _config.yml&lt;/p&gt;
&lt;p&gt;url: &lt;a href=&quot;http://www.aboysblog.com&quot;&gt;http://www.aboysblog.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;root: /&lt;/p&gt;
&lt;p&gt;permalink: :year/:month/:day/:title/&lt;/p&gt;
&lt;p&gt;permalink_defaults:&lt;/p&gt;
&lt;p&gt;Hexo 的常用操作&lt;br&gt;发表一篇文章&lt;br&gt;hexo new “文章标题”&lt;br&gt;Hexo + GitHub Pages搭建博客&lt;/p&gt;
&lt;p&gt;在本地博客文件夹source_posts文件夹下看到我们新建的 markdown 文件。&lt;/p&gt;
&lt;p&gt;当然，我们也可以手动添加Markdown文件在source-&amp;gt;_posts文件夹下，其效果同样可以媲美hexo new&lt;/p&gt;
&lt;p&gt;文章编辑好之后，运行生成、部署命令：&lt;/p&gt;
&lt;p&gt;hexo clean&lt;/p&gt;
&lt;p&gt;hexo g&lt;/p&gt;
&lt;p&gt;hexo d&lt;br&gt;当然你也可以执行下面的命令，相当于上面两条命令的效果&lt;/p&gt;
&lt;p&gt;hexo clean&lt;/p&gt;
&lt;p&gt;hexo d -g&lt;br&gt;新建一个自定义页面&lt;br&gt;hexo new page folder&lt;br&gt;文章如何添加多个标签&lt;br&gt;有两种多标签格式&lt;/p&gt;
&lt;p&gt;tags: [a, b, c]&lt;/p&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;p&gt;tags:&lt;/p&gt;
&lt;p&gt;– a&lt;/p&gt;
&lt;p&gt;– b&lt;/p&gt;
&lt;p&gt;– c&lt;/p&gt;
&lt;p&gt;显示部分文章内容&lt;br&gt;如果在博客文章列表中，不想全文显示，可以增加
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VPS+ShadowSocks搭建自己的VPN</title>
    <link href="https://www.aboysblog.com/2018/04/06/VPS+ShadowSocks%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPN/"/>
    <id>https://www.aboysblog.com/2018/04/06/VPS+ShadowSocks搭建自己的VPN/</id>
    <published>2018-04-06T12:31:46.221Z</published>
    <updated>2019-07-22T06:55:30.005Z</updated>
    
    <content type="html"><![CDATA[<pre><code>据报导，自7月1日起，中国的 Android 和苹果应用商店将不再允许 VPN 应用下载，以阻止中国网民绕过“网络防火墙”（GFW）浏览墙外内容,墙越来越高了。VPN 供应商 Green 已于6月22日发布公告，证实自7月1日起停止服务。此外，Netfits、VPN Master Pro、Ponhon、Snap VPN 和 SkyX 等 VPN 供应商在过去几个月里，也或被迫停止服务，或从应用商店消失。之前一直在用GreenVPN，感觉很好用，后来停止服务了。不过，想翻墙还是有办法的，比如本文要介绍的shadowsocks。shadowsocks是一款自定义协议的代理软件，由于其流量特征不明显，不太容易用技术手段拦截。虽然作者[@clowwindy](https://twitter.com/clowwindy?utm_source=textarea.com&amp;utm_medium=textarea.com&amp;utm_campaign=article)两年前就被有司请喝茶了，shadowsocks却一直运转良好没有被彻底封杀过。</code></pre><p>自己搭建VPN还可以多人一起使用。搭建VPN常见的组合就是VPS+ShadowSocks+加速。</p><h2 id="简单介绍一下shadowsocks翻墙的原理"><a href="#简单介绍一下shadowsocks翻墙的原理" class="headerlink" title="简单介绍一下shadowsocks翻墙的原理"></a>简单介绍一下shadowsocks翻墙的原理</h2><pre><code>shadowsocks客户端启动后会在本地开启一个代理，可以理解为一个数据的出入口。用户想通过shadowsocks访问墙外网站的请求都要经过这个本地代理。通过shadowsocks翻墙上网的过程是这样的：1、用户发起一个网络访问请求，比如用浏览器访问google.com，请求被发送到本地代理。2、客户端从本地代理拿到请求数据，然后发送至墙外的shadowsocks服务端。3、服务端向google.com发起请求，然后收到google的响应数据，也就是google首页的数据。4、服务端把响应数据发回客户端。5、客户端再通过本地代理把响应数据交给浏览器，google首页就显示出来了。整个过程中的第2步和第4步都是通过shadowsocks自定义的协议隐蔽地进行，很难被过滤，所以我们才能一直用它顺畅地翻墙。</code></pre><p><img src="https://www.madongdong.me/wp-content/uploads/2017/09/2017090316350268.jpg" alt="shadowsocks" title="shadowsocks"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;据报导，自7月1日起，中国的 Android 和苹果应用商店将不再允许 VPN 应用下载，以阻止中国网民绕过“网络防火墙”（GFW）浏览墙外内容,墙越来越高了。VPN 供应商 Green 已于6月22日发布公告，证实自7月1日起停止服务。此外，Netfits
      
    
    </summary>
    
    
  </entry>
  
</feed>
